@using System.Text.Json
@using System.Net.Http.Json
@using testGrid.Data
@inject WeatherForecastServiceSecond ForecastService
@inject HttpClient httpClient

<h3>FetchDataAdvanced</h3>

@page "/fetchdataAdvanced"

<PageTitle>Weather forecast</PageTitle>




<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<MudDataGrid T="IDictionary<string, object>" MultiSelection="true" Items="@Elements" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="false" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
            <SelectColumn T="IDictionary<string, object>" />
                <Column T="IDictionary<string, object>" FieldType="@typeof(DateTime)" Field="Date"  Title="Date" Filterable="false" />
                <Column T="IDictionary<string, object>" FieldType="@typeof(int)" Field="TemperatureC" Title="TemperatureC" Filterable="false"/>
                <Column T="IDictionary<string, object>" FieldType="@typeof(int)" Field="TemperatureF" SortBy="@_sortBy" Title="TemperatureF" Filterable="false"/>
                <Column T="IDictionary<string, object>" FieldType="@typeof(string)" Field="Summary"  Title="Summary" Filterable="false"/>
 </Columns>
    <PagerContent>
        <MudDataGridPager T="IDictionary<string, object>" />
    </PagerContent>
</MudDataGrid>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<IDictionary<string, object>> Elements = new List<IDictionary<string, object>>();
    private string? _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        var forcast =  await ForecastService.GetForecastAsyncs(DateTime.Now);
        var serialized = JsonSerializer.Serialize(forcast);
        Elements = JsonSerializer.Deserialize<List<IDictionary<string, object>>>(serialized);
        Console.WriteLine(forcast);
    }

    // custom sort by name length
    private Func<IDictionary<string, object>, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x["Summary"].ToString().Length;
        else
            return x["Summary"].ToString();
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<IDictionary<string, object>, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x["Summary"].ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x["TemperatureC"].ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x["Date"]} {x["TemperatureF"]}".Contains(_searchString))
            return true;

        return false;
    };
    // events
    void RowClicked(DataGridRowClickEventArgs<IDictionary<string, object>> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<IDictionary<string, object>> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }



}